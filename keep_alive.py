from flask import Flask
from threading import Thread
import time
import requests
import os
import logging

app = Flask('')
log = logging.getLogger('werkzeug')
log.setLevel(logging.ERROR)

@app.route('/')
def home():
    return """
    <html>
    <head>
        <title>Heroku Userbot Keep-Alive</title>
        <meta name="description" content="–•–∏–∫–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7">
    </head>
    <body>
        <h1>ü§ñ Heroku Userbot Keep-Alive</h1>
        <p><strong>Status:</strong> ‚úÖ Online</p>
        <p><strong>Platform:</strong> Render.com Ready</p>
        <p><strong>Time:</strong> {}</p>
        <p>–•–∏–∫–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7</p>
    </body>
    </html>
    """.format(time.strftime('%Y-%m-%d %H:%M:%S'))

@app.route('/ping')
def ping():
    return "pong"

@app.route('/health')
def health():
    return {
        "status": "online",
        "uptime": "24/7",
        "service": "Heroku Userbot",
        "platform": "render-ready"
    }

@app.route('/status')
def status():
    return {
        "status": "online",
        "uptime": "24/7",
        "service": "Heroku Userbot"
    }

def run():
    # –ù–∞ Render.com –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π PORT, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º
    if any(env_var in os.environ for env_var in ["RENDER", "RENDER_SERVICE_NAME", "RENDER_EXTERNAL_URL"]):
        port = 8080  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç 8080 –¥–ª—è keep-alive –Ω–∞ Render
    else:
        port = int(os.environ.get('PORT', 8080))
        if port == 5000:  # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
            port = 8080
    app.run(host="0.0.0.0", port=port, debug=False)

def self_ping():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        try:
            time.sleep(200)  # 5 –º–∏–Ω—É—Ç
            
            # –î–ª—è Render.com
            render_url = os.environ.get('RENDER_EXTERNAL_URL')
            replit_url = os.environ.get('REPL_SLUG')
            
            if render_url:
                url = render_url
            elif replit_url:
                url = f"https://{replit_url}.replit.dev/"
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                service_name = os.environ.get('RENDER_SERVICE_NAME', 'userbot')
                url = f"https://{service_name}.onrender.com"
                
            print(f"üèì Self-ping to: {url}")
            response = requests.get(url, timeout=15)
            if response.status_code == 200:
                print("‚úÖ Self-ping successful")
            else:
                print(f"‚ö†Ô∏è Self-ping status: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Self-ping failed: {e}")

def keep_alive():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    server_thread = Thread(target=run)
    server_thread.daemon = True
    server_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–ø–∏–Ω–≥
    ping_thread = Thread(target=self_ping)
    ping_thread.daemon = True
    ping_thread.start()
    
    print("üöÄ Keep-alive server started for Render.com!")
