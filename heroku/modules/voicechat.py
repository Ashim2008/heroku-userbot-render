# ¬©Ô∏è Dan Gazizullin, 2021-2023
# This file is a part of Heroku Userbot
# Code is NOT licensed under any license
# üîí Licensed only for Heroku Userbot
# üåê https://github.com/hikariatama/Heroku

"""
üéµ Native Voice Chat Module for Heroku Userbot
Works directly with Heroku's CustomTelegramClient using hybrid architecture:
- Heroku userbot handles commands, queues, and UI
- Separate Pyrogram backend handles media streaming via PyTgCalls
"""

import asyncio
import contextlib
import json
import logging
import os
import re
import tempfile
import time
import typing
from dataclasses import dataclass, asdict
from pathlib import Path

from .. import loader, utils

# –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
STREAMING_AVAILABLE = True
STREAMING_ERROR = None

try:
    import pyrogram
    from pyrogram import Client as PyrogramClient
    from pyrogram.errors import AuthKeyUnregistered, SessionPasswordNeeded
    logging.info("‚úÖ Pyrogram imports successful")
except ImportError as e:
    STREAMING_AVAILABLE = False
    STREAMING_ERROR = f"Pyrogram not installed: {e}"
    logging.error(f"‚ùå Pyrogram import failed: {e}")

try:
    from pytgcalls import PyTgCalls
    from pytgcalls.exceptions import NoActiveGroupCall, NotInCallError
    logging.info("‚úÖ PyTgCalls imports successful")
except ImportError as e:
    STREAMING_AVAILABLE = False
    STREAMING_ERROR = f"PyTgCalls not installed: {e}"
    logging.error(f"‚ùå PyTgCalls import failed: {e}")

try:
    import yt_dlp
    from yt_dlp import YoutubeDL
    YT_DLP_AVAILABLE = True
    logging.info("‚úÖ yt-dlp imports successful")
except ImportError as e:
    YT_DLP_AVAILABLE = False
    logging.error(f"‚ùå yt-dlp import failed: {e}")

try:
    import ffmpeg
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg binary
    import subprocess
    subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
    FFMPEG_AVAILABLE = True
    logging.info("‚úÖ ffmpeg binary and python package available")
except (ImportError, subprocess.CalledProcessError, FileNotFoundError) as e:
    FFMPEG_AVAILABLE = False
    logging.error(f"‚ùå ffmpeg not available: {e}")


@dataclass
class QueueItem:
    """–≠–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    file_path: str
    title: str
    duration: int = 0
    is_video: bool = False
    source_type: str = "unknown"  # youtube, url, telegram, file
    added_by: int = 0
    timestamp: float = 0
    
    def to_dict(self) -> dict:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: dict) -> "QueueItem":
        return cls(**data)


class TempFileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π"""
    
    def __init__(self):
        self._temp_files: typing.Set[str] = set()
        self._cleanup_task = None
        
    def create_temp_file(self, suffix: str = "") -> str:
        """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
        # Use NamedTemporaryFile instead of mktemp for security
        temp_fd = tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
        temp_file = temp_fd.name
        temp_fd.close()  # Close the file descriptor, but keep the file
        self._temp_files.add(temp_file)
        return temp_file
    
    def cleanup_file(self, file_path: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            if os.path.exists(file_path):
                os.unlink(file_path)
            self._temp_files.discard(file_path)
        except Exception as e:
            logging.error(f"‚ùå Error cleaning temp file {file_path}: {e}")
    
    def cleanup_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for file_path in list(self._temp_files):
            self.cleanup_file(file_path)
        self._temp_files.clear()


class QueueManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞"""
    
    def __init__(self, db):
        self.db = db
        self._queues: typing.Dict[int, typing.List[QueueItem]] = {}
        self._current_playing: typing.Dict[int, int] = {}  # chat_id -> queue_index
        self._repeat_mode: typing.Dict[int, bool] = {}
        
    async def load_queues(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = self.db.get("VoiceChatNative", "queues", {})
            for chat_id_str, queue_data in data.items():
                chat_id = int(chat_id_str)
                self._queues[chat_id] = [
                    QueueItem.from_dict(item_data) 
                    for item_data in queue_data.get("items", [])
                ]
                self._current_playing[chat_id] = queue_data.get("current", 0)
                self._repeat_mode[chat_id] = queue_data.get("repeat", False)
            logging.info(f"‚úÖ Loaded {len(self._queues)} queues from database")
        except Exception as e:
            logging.error(f"‚ùå Error loading queues: {e}")
    
    async def save_queues(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {}
            for chat_id, queue in self._queues.items():
                if queue:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –æ—á–µ—Ä–µ–¥–∏
                    data[str(chat_id)] = {
                        "items": [item.to_dict() for item in queue],
                        "current": self._current_playing.get(chat_id, 0),
                        "repeat": self._repeat_mode.get(chat_id, False)
                    }
            self.db.set("VoiceChatNative", "queues", data)
            logging.info(f"‚úÖ Saved {len(data)} queues to database")
        except Exception as e:
            logging.error(f"‚ùå Error saving queues: {e}")
    
    def add_item(self, chat_id: int, item: QueueItem) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
        if chat_id not in self._queues:
            self._queues[chat_id] = []
        
        item.timestamp = time.time()
        self._queues[chat_id].append(item)
        return len(self._queues[chat_id])
    
    def get_queue(self, chat_id: int) -> typing.List[QueueItem]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —á–∞—Ç–∞"""
        return self._queues.get(chat_id, [])
    
    def get_current(self, chat_id: int) -> typing.Optional[QueueItem]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏"""
        queue = self.get_queue(chat_id)
        current_index = self._current_playing.get(chat_id, 0)
        
        if queue and 0 <= current_index < len(queue):
            return queue[current_index]
        return None
    
    def next_item(self, chat_id: int) -> typing.Optional[QueueItem]:
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        queue = self.get_queue(chat_id)
        if not queue:
            return None
        
        current_index = self._current_playing.get(chat_id, 0)
        next_index = current_index + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞
        if next_index >= len(queue):
            if self._repeat_mode.get(chat_id, False):
                next_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            else:
                return None  # –û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        
        self._current_playing[chat_id] = next_index
        return queue[next_index]
    
    def clear_queue(self, chat_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —á–∞—Ç–∞"""
        self._queues.pop(chat_id, None)
        self._current_playing.pop(chat_id, None)
    
    def set_repeat(self, chat_id: int, enabled: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞"""
        self._repeat_mode[chat_id] = enabled
    
    def is_repeat_enabled(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞"""
        return self._repeat_mode.get(chat_id, False)


class SourceResolver:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–µ–¥–∏–∞"""
    
    def __init__(self, temp_manager):
        self.temp_manager = temp_manager
    
    async def resolve(self, source: str, metadata: dict = None) -> typing.Optional[QueueItem]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å QueueItem"""
        raise NotImplementedError


class YouTubeSourceResolver(SourceResolver):
    """Resolver –¥–ª—è YouTube –≤–∏–¥–µ–æ –∏ –º—É–∑—ã–∫–∏"""
    
    async def resolve(self, url: str, metadata: dict = None) -> typing.Optional[QueueItem]:
        if not YT_DLP_AVAILABLE:
            logging.error("‚ùå yt-dlp not available")
            return None
        
        if not FFMPEG_AVAILABLE:
            logging.error("‚ùå ffmpeg not available for audio processing")
            return None
        
        temp_file = None
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.temp_manager.create_temp_file(".mp3")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': temp_file.replace('.mp3', '.%(ext)s'),  # –ü–æ–∑–≤–æ–ª—è–µ–º yt-dlp –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                'noplaylist': True,
                'quiet': True,
                'no_warnings': True,
                'extractaudio': True,
                'audioformat': 'mp3',
                'audioquality': '192',
                'max_filesize': 50 * 1024 * 1024,  # 50MB –ª–∏–º–∏—Ç
            }
            
            with YoutubeDL(ydl_opts) as ydl:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                info = ydl.extract_info(url, download=False)
                title = info.get('title', 'Unknown')
                duration = info.get('duration', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                if duration > 3600:  # 1 —á–∞—Å –ª–∏–º–∏—Ç
                    logging.error(f"‚ùå Video too long: {duration}s")
                    return None
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                ydl.download([url])
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º)
                import glob
                base_path = temp_file.replace('.mp3', '')
                downloaded_files = glob.glob(f"{base_path}.*")
                
                if downloaded_files:
                    actual_file = downloaded_files[0]
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .mp3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if not actual_file.endswith('.mp3'):
                        os.rename(actual_file, temp_file)
                        actual_file = temp_file
                else:
                    actual_file = temp_file
                
                return QueueItem(
                    file_path=actual_file,
                    title=title,
                    duration=duration,
                    is_video=False,  # –í—Å–µ–≥–¥–∞ –∞—É–¥–∏–æ –¥–ª—è YouTube
                    source_type="youtube",
                    added_by=metadata.get('user_id', 0) if metadata else 0
                )
                
        except Exception as e:
            logging.error(f"‚ùå YouTube resolve error: {e}")
            # –û—á–∏—â–∞–µ–º temp —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if temp_file and os.path.exists(temp_file):
                self.temp_manager.cleanup_file(temp_file)
            return None


class DirectURLSourceResolver(SourceResolver):
    """Resolver –¥–ª—è –ø—Ä—è–º—ã—Ö URL —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã"""
    
    async def resolve(self, url: str, metadata: dict = None) -> typing.Optional[QueueItem]:
        temp_file = None
        
        try:
            import aiohttp
            
            async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=60)  # 60 —Å–µ–∫—É–Ω–¥ –ª–∏–º–∏—Ç
            ) as session:
                # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
                try:
                    async with session.head(url) as head_response:
                        if head_response.status != 200:
                            logging.error(f"‚ùå URL not accessible: {head_response.status}")
                            return None
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        content_length = head_response.headers.get('content-length')
                        if content_length:
                            size_mb = int(content_length) / (1024 * 1024)
                            if size_mb > 100:  # 100MB –ª–∏–º–∏—Ç
                                logging.error(f"‚ùå File too large: {size_mb:.1f}MB")
                                return None
                        
                        content_type = head_response.headers.get('content-type', '').lower()
                except Exception:
                    # –ï—Å–ª–∏ HEAD –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å GET
                    content_type = ''
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π temp —Ñ–∞–π–ª
                is_video = 'video' in content_type
                
                if 'audio' in content_type:
                    if 'mp3' in content_type:
                        temp_file = self.temp_manager.create_temp_file('.mp3')
                    elif 'ogg' in content_type:
                        temp_file = self.temp_manager.create_temp_file('.ogg')
                    else:
                        temp_file = self.temp_manager.create_temp_file('.m4a')
                elif 'video' in content_type:
                    if 'mp4' in content_type:
                        temp_file = self.temp_manager.create_temp_file('.mp4')
                    else:
                        temp_file = self.temp_manager.create_temp_file('.mkv')
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
                    temp_file = self.temp_manager.create_temp_file()
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞
                downloaded_size = 0
                max_size = 100 * 1024 * 1024  # 100MB
                
                async with session.get(url) as response:
                    if response.status == 200:
                        with open(temp_file, 'wb') as f:
                            async for chunk in response.content.iter_chunked(8192):
                                downloaded_size += len(chunk)
                                if downloaded_size > max_size:
                                    raise Exception(f"File too large (>{max_size/(1024*1024):.1f}MB)")
                                f.write(chunk)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        title = metadata.get('title') if metadata else None
                        if not title:
                            title = url.split('/')[-1]
                            if '?' in title:
                                title = title.split('?')[0]
                            if not title or title == '/':
                                title = "Downloaded Media"
                        
                        return QueueItem(
                            file_path=temp_file,
                            title=title,
                            duration=0,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
                            is_video=is_video,
                            source_type="url",
                            added_by=metadata.get('user_id', 0) if metadata else 0
                        )
                    else:
                        logging.error(f"‚ùå HTTP error {response.status}")
                        return None
                        
        except Exception as e:
            logging.error(f"‚ùå Direct URL resolve error: {e}")
            # –û—á–∏—â–∞–µ–º temp —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if temp_file and os.path.exists(temp_file):
                self.temp_manager.cleanup_file(temp_file)
            return None


class TelegramMediaSourceResolver(SourceResolver):
    """Resolver –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram"""
    
    def __init__(self, temp_manager, client):
        super().__init__(temp_manager)
        self.client = client
    
    async def resolve(self, message, metadata: dict = None) -> typing.Optional[QueueItem]:
        temp_file = None
        
        try:
            if not message or not message.media:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 200MB –¥–ª—è Telegram)
            file_size = 0
            if hasattr(message, 'document') and message.document:
                file_size = getattr(message.document, 'size', 0)
            elif hasattr(message, 'audio') and message.audio:
                file_size = getattr(message.audio, 'size', 0)
            elif hasattr(message, 'video') and message.video:
                file_size = getattr(message.video, 'size', 0)
            
            if file_size > 200 * 1024 * 1024:  # 200MB –ª–∏–º–∏—Ç
                logging.error(f"‚ùå Telegram file too large: {file_size/(1024*1024):.1f}MB")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            duration = 0
            title = "Unknown"
            is_video = False
            
            if hasattr(message, 'document') and message.document:
                # –î–æ–∫—É–º–µ–Ω—Ç (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª)
                mime_type = getattr(message.document, 'mime_type', '')
                is_video = mime_type.startswith('video/')
                
                if mime_type.endswith('/mp3') or 'audio/mp3' in mime_type:
                    temp_file = self.temp_manager.create_temp_file('.mp3')
                elif mime_type.endswith('/ogg') or 'audio/ogg' in mime_type:
                    temp_file = self.temp_manager.create_temp_file('.ogg')
                elif mime_type.endswith('/mp4') or 'video/mp4' in mime_type:
                    temp_file = self.temp_manager.create_temp_file('.mp4')
                    is_video = True
                else:
                    temp_file = self.temp_manager.create_temp_file()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if hasattr(message.document, 'attributes'):
                    for attr in message.document.attributes:
                        if hasattr(attr, 'title') and attr.title:
                            title = attr.title
                        elif hasattr(attr, 'file_name') and attr.file_name:
                            title = attr.file_name
                        elif hasattr(attr, 'duration'):
                            duration = getattr(attr, 'duration', 0)
                        elif hasattr(attr, 'performer') and hasattr(attr, 'title'):
                            title = f"{attr.performer} - {attr.title}"
                            
            elif hasattr(message, 'audio') and message.audio:
                # –ê—É–¥–∏–æ —Ñ–∞–π–ª
                temp_file = self.temp_manager.create_temp_file('.mp3')
                duration = getattr(message.audio, 'duration', 0)
                title = getattr(message.audio, 'title', 'Audio')
                if hasattr(message.audio, 'performer') and message.audio.performer:
                    title = f"{message.audio.performer} - {title}"
            
            elif hasattr(message, 'video') and message.video:
                # –í–∏–¥–µ–æ —Ñ–∞–π–ª
                temp_file = self.temp_manager.create_temp_file('.mp4')
                duration = getattr(message.video, 'duration', 0)
                title = "Video"
                is_video = True
                
            if not temp_file:
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await self.client.download_media(message, temp_file)
            
            return QueueItem(
                file_path=temp_file,
                title=title,
                duration=duration,
                is_video=is_video,
                source_type="telegram",
                added_by=metadata.get('user_id', 0) if metadata else 0
            )
            
        except Exception as e:
            logging.error(f"‚ùå Telegram media resolve error: {e}")
            if temp_file and os.path.exists(temp_file):
                self.temp_manager.cleanup_file(temp_file)
            return None


class PyrogramTgCallsBackend:
    """Pyrogram + PyTgCalls backend –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.client = None
        self.pytgcalls = None
        self.is_initialized = False
        self.active_calls = {}  # chat_id -> call_info
    
    async def initialize(self, api_id: int, api_hash: str, session_string: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞ –∏ PyTgCalls"""
        try:
            if not STREAMING_AVAILABLE:
                raise Exception(f"Streaming not available: {STREAMING_ERROR}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞
            if session_string:
                self.client = PyrogramClient(
                    "voicechat_session", 
                    api_id=api_id, 
                    api_hash=api_hash,
                    session_string=session_string,
                    no_updates=False
                )
            else:
                self.client = PyrogramClient(
                    "voicechat_session",
                    api_id=api_id,
                    api_hash=api_hash,
                    no_updates=False
                )
            
            await self.client.start()
            logging.info("‚úÖ Pyrogram client started")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyTgCalls
            self.pytgcalls = PyTgCalls(self.client)
            await self.pytgcalls.start()
            logging.info("‚úÖ PyTgCalls started")
            
            self.is_initialized = True
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Backend initialization failed: {e}")
            await self.cleanup()
            return False
    
    
    async def join_voice_chat(self, chat_id: int) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"""
        try:
            if not self.is_initialized:
                logging.error("‚ùå Backend not initialized")
                return False
            
            if chat_id in self.active_calls:
                logging.info(f"‚úÖ Already in voice chat {chat_id}")
                return True
            
            try:
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π PyTgCalls API
                from pytgcalls.types import AudioParameters
                await self.pytgcalls.join_group_call(
                    chat_id,
                    AudioParameters()
                )
            except Exception as e:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π API
                try:
                    await self.pytgcalls.join_group_call(chat_id)
                except:
                    if hasattr(self.pytgcalls, 'join_group_call'):
                        await self.pytgcalls.join_group_call(chat_id, "")
                    else:
                        raise e
            
            self.active_calls[chat_id] = {
                'joined_at': time.time(),
                'current_stream': None,
                'is_paused': False
            }
            
            logging.info(f"‚úÖ Joined voice chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to join voice chat {chat_id}: {e}")
            return False
    
    async def leave_voice_chat(self, chat_id: int) -> bool:
        """–ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"""
        try:
            if chat_id not in self.active_calls:
                return True
            
            try:
                await self.pytgcalls.leave_group_call(chat_id)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error leaving call (may be already left): {e}")
            
            self.active_calls.pop(chat_id, None)
            
            logging.info(f"‚úÖ Left voice chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to leave voice chat {chat_id}: {e}")
            return False
    
    async def play_media(self, chat_id: int, file_path: str, is_video: bool = False, quality: str = "medium") -> bool:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª"""
        try:
            if not self.is_initialized:
                logging.error("‚ùå Backend not initialized")
                return False
            
            if not os.path.exists(file_path):
                logging.error(f"‚ùå Media file not found: {file_path}")
                return False
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π PyTgCalls API - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ join_group_call —Å –ø–æ—Ç–æ–∫–æ–º
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∞—Ç–æ–º
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π PyTgCalls API
            try:
                from pytgcalls.types import AudioPiped, VideoPiped, AudioParameters, VideoParameters
                
                if chat_id in self.active_calls and self.active_calls[chat_id].get('current_stream'):
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
                    if is_video:
                        stream = VideoPiped(file_path)
                        await self.pytgcalls.change_stream(
                            chat_id,
                            stream,
                            video_parameters=VideoParameters.from_quality("medium"),
                            audio_parameters=AudioParameters.from_quality("medium")
                        )
                    else:
                        stream = AudioPiped(file_path)
                        await self.pytgcalls.change_stream(
                            chat_id,
                            stream,
                            audio_parameters=AudioParameters.from_quality(quality)
                        )
                else:
                    # –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É
                    if is_video:
                        stream = VideoPiped(file_path)
                        await self.pytgcalls.join_group_call(
                            chat_id,
                            stream,
                            video_parameters=VideoParameters.from_quality("medium"),
                            audio_parameters=AudioParameters.from_quality("medium")
                        )
                    else:
                        stream = AudioPiped(file_path)
                        await self.pytgcalls.join_group_call(
                            chat_id,
                            stream,
                            audio_parameters=AudioParameters.from_quality(quality)
                        )
                    
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
                    self.active_calls[chat_id] = {
                        'joined_at': time.time(),
                        'current_stream': file_path,
                        'is_paused': False,
                    }
                    
            except (ImportError, AttributeError) as e:
                logging.error(f"‚ùå PyTgCalls API error: {e}")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç—Ä–∏–º–µ
            if chat_id in self.active_calls:
                self.active_calls[chat_id]['current_stream'] = file_path
                self.active_calls[chat_id]['is_paused'] = False
            
            logging.info(f"üéµ Started playing: {os.path.basename(file_path)} in chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to play media in chat {chat_id}: {e}")
            return False
    
    async def pause_stream(self, chat_id: int) -> bool:
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–∏–º –Ω–∞ –ø–∞—É–∑—É"""
        try:
            if chat_id not in self.active_calls:
                return False
            
            if hasattr(self.pytgcalls, 'pause_stream'):
                await self.pytgcalls.pause_stream(chat_id)
            else:
                logging.warning("‚ö†Ô∏è Pause not supported by PyTgCalls version")
                return False
            
            self.active_calls[chat_id]['is_paused'] = True
            logging.info(f"‚è∏Ô∏è Paused stream in chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to pause stream in chat {chat_id}: {e}")
            return False
    
    async def resume_stream(self, chat_id: int) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º"""
        try:
            if chat_id not in self.active_calls:
                return False
            
            if hasattr(self.pytgcalls, 'resume_stream'):
                await self.pytgcalls.resume_stream(chat_id)
            else:
                logging.warning("‚ö†Ô∏è Resume not supported by PyTgCalls version")
                return False
                
            self.active_calls[chat_id]['is_paused'] = False
            logging.info(f"‚ñ∂Ô∏è Resumed stream in chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to resume stream in chat {chat_id}: {e}")
            return False
    
    async def stop_stream(self, chat_id: int) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º"""
        try:
            if chat_id not in self.active_calls:
                return False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º –∏ –ø–æ–∫–∏–¥–∞–µ–º —á–∞—Ç
            await self.leave_voice_chat(chat_id)
            
            logging.info(f"‚èπÔ∏è Stopped stream in chat {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to stop stream in chat {chat_id}: {e}")
            return False
    
    def is_in_call(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ"""
        return chat_id in self.active_calls
    
    def is_playing(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —á—Ç–æ-—Ç–æ –≤ —á–∞—Ç–µ"""
        call_info = self.active_calls.get(chat_id)
        return bool(call_info and call_info.get('current_stream') and not call_info.get('is_paused'))
    
    def is_paused(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–∞—É–∑–µ –ª–∏ —Å—Ç—Ä–∏–º"""
        call_info = self.active_calls.get(chat_id)
        return bool(call_info and call_info.get('is_paused'))
    
    async def cleanup(self):
        """Cleanup backend resources"""
        try:
            # –ü–æ–∫–∏–¥–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
            for chat_id in list(self.active_calls.keys()):
                await self.leave_voice_chat(chat_id)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTgCalls
            if self.pytgcalls:
                try:
                    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç stop()
                    if hasattr(self.pytgcalls, 'stop'):
                        await self.pytgcalls.stop()
                    logging.info("‚úÖ PyTgCalls stopped")
                except Exception as e:
                    logging.error(f"‚ùå Error stopping PyTgCalls: {e}")
                finally:
                    self.pytgcalls = None
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç
            if self.client:
                try:
                    await self.client.stop()
                    logging.info("‚úÖ Pyrogram client stopped")
                except Exception as e:
                    logging.error(f"‚ùå Error stopping Pyrogram client: {e}")
                finally:
                    self.client = None
            
            self.is_initialized = False
            self.active_calls.clear()
            
        except Exception as e:
            logging.error(f"‚ùå Error during backend cleanup: {e}")


@loader.tds
class VoiceChatNativeMod(loader.Module):
    """üéµ Native Voice Chat module with Pyrogram + PyTgCalls backend"""
    
    strings = {
        "name": "VoiceChatNative",
        "streaming_unavailable": "‚ùå <b>Streaming not available</b>\\n<code>{}</code>\\n\\n<b>Required:</b> <code>pip install pyrogram py-tgcalls yt-dlp</code>",
        "not_configured": "‚ùå <b>Voice chat not configured</b>\\n\\nUse <code>.vcsetup</code> to configure Pyrogram session",
        "backend_failed": "‚ùå <b>Backend initialization failed</b>\\nCheck logs for details",
        "no_media": "‚ùå <b>No media found</b>\\nReply to media or provide YouTube URL",
        "unsupported_source": "‚ùå <b>Unsupported source</b>\\nSupported: YouTube, direct URLs, Telegram media",
        "download_failed": "‚ùå <b>Download failed</b>\\nCheck URL or try again later",
        "not_in_voice_chat": "‚ùå <b>Not in voice chat</b>\\nUse <code>.addm</code> or <code>.addv</code> first",
        "queue_empty": "‚ùå <b>Queue is empty</b>\\nAdd media with <code>.addm</code> or <code>.addv</code>",
        "vcsetup_start": "üîß <b>Voice Chat Setup</b>\\n\\n1Ô∏è‚É£ Go to <a href='https://my.telegram.org/apps'>my.telegram.org/apps</a>\\n2Ô∏è‚É£ Create app and get API credentials\\n3Ô∏è‚É£ Send your API ID:",
        "vcsetup_api_hash": "‚úÖ <b>API ID saved</b>\\n\\n4Ô∏è‚É£ Now send your API Hash:",
        "vcsetup_phone": "‚úÖ <b>API Hash saved</b>\\n\\n5Ô∏è‚É£ Send your phone number with country code\\n<b>Example:</b> <code>+1234567890</code>",
        "vcsetup_code": "üì± <b>Authorization code sent</b>\\n\\n6Ô∏è‚É£ Enter the code from Telegram:",
        "vcsetup_2fa": "üîê <b>2FA enabled</b>\\n\\n7Ô∏è‚É£ Enter your 2FA password:",
        "vcsetup_complete": "‚úÖ <b>Voice chat configured successfully!</b>\\n\\nBackend: <b>Pyrogram + PyTgCalls</b>\\nStatus: <b>Ready</b>\\n\\nYou can now use: <code>.addm</code>, <code>.addv</code>, <code>.pause</code>, <code>.resume</code>, <code>.stop</code>",
        "vcsetup_failed": "‚ùå <b>Setup failed:</b> <code>{}</code>",
        "added_to_queue": "‚úÖ <b>Added to queue</b>\\n\\nüìÇ <b>Title:</b> <code>{}</code>\\n‚è±Ô∏è <b>Duration:</b> <code>{}s</code>\\nüî¢ <b>Position:</b> <code>{}</code>",
        "playing_now": "üéµ <b>Now playing</b>\\n\\nüìÇ <b>Title:</b> <code>{}</code>\\n‚è±Ô∏è <b>Duration:</b> <code>{}s</code>\\nüìç <b>Chat:</b> <code>{}</code>",
        "paused": "‚è∏Ô∏è <b>Paused</b>",
        "resumed": "‚ñ∂Ô∏è <b>Resumed</b>", 
        "stopped": "‚èπÔ∏è <b>Stopped and left voice chat</b>",
        "queue_status": "üìã <b>Queue ({} items)</b>\\n\\n{}",
        "queue_item": "{}. <b>{}</b> ({}s) {}\\n",
        "repeat_enabled": "üîÅ <b>Repeat mode enabled</b>",
        "repeat_disabled": "üîÅ <b>Repeat mode disabled</b>",
        "queue_cleared": "üóëÔ∏è <b>Queue cleared</b>",
    }
    
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "auto_join",
                True,
                lambda: "Auto join voice chat when adding media",
                validator=loader.validators.Boolean
            ),
            loader.ConfigValue(
                "auto_play",
                True,
                lambda: "Auto start playing when queue is not empty",
                validator=loader.validators.Boolean
            ),
            loader.ConfigValue(
                "max_duration",
                3600,
                lambda: "Maximum media duration in seconds (0 = no limit)",
                validator=loader.validators.Integer
            ),
        )
        
        # Core components
        self.temp_manager = TempFileManager()
        self.queue_manager = None
        self.backend = None
        
        # Source resolvers
        self.youtube_resolver = None
        self.url_resolver = None
        self.telegram_resolver = None
        
        # State –¥–ª—è vcsetup
        self.setup_states = {}
        self.temp_clients = {}
    
    async def client_ready(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        # client –∏ db –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ self._client –∏ self.db –∏–∑ loader.Module
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π
        self.queue_manager = QueueManager(self.db)
        await self.queue_manager.load_queues()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º resolvers
        self.youtube_resolver = YouTubeSourceResolver(self.temp_manager)
        self.url_resolver = DirectURLSourceResolver(self.temp_manager)
        self.telegram_resolver = TelegramMediaSourceResolver(self.temp_manager, self._client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º backend
        await self._initialize_backend()
    
    async def _initialize_backend(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è streaming backend"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            session_data = self.db.get("VoiceChatNative", "session", {})
            if not session_data or not session_data.get("session_string"):
                logging.info("‚ùå No Pyrogram session found")
                return
            
            api_id = session_data.get("api_id")
            api_hash = session_data.get("api_hash")
            session_string = session_data.get("session_string")
            
            if not all([api_id, api_hash, session_string]):
                logging.error("‚ùå Incomplete session data")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º backend
            self.backend = PyrogramTgCallsBackend()
            success = await self.backend.initialize(api_id, api_hash, session_string)
            
            if success:
                logging.info("‚úÖ Voice chat backend initialized")
            else:
                logging.error("‚ùå Backend initialization failed")
                self.backend = None
                
        except Exception as e:
            logging.error(f"‚ùå Backend init error: {e}")
            self.backend = None
    
    async def on_unload(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if hasattr(self, 'temp_manager'):
            self.temp_manager.cleanup_all()
        
        if hasattr(self, 'backend') and self.backend:
            await self.backend.cleanup()
        
        # –û—á–∏—Å—Ç–∫–∞ temp clients –æ—Ç vcsetup
        for client in self.temp_clients.values():
            try:
                if client and client.is_connected:
                    await client.stop()
            except:
                pass
        self.temp_clients.clear()
    
    @loader.command()
    async def vcsetup(self, message):
        """Configure voice chat with Pyrogram session"""
        if not STREAMING_AVAILABLE:
            await utils.answer(message, self.strings["streaming_unavailable"].format(STREAMING_ERROR))
            return
        
        user_id = message.sender_id
        
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.setup_states:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π temp client
            old_client = self.temp_clients.get(user_id)
            if old_client:
                try:
                    await old_client.stop()
                except:
                    pass
                del self.temp_clients[user_id]
            
            del self.setup_states[user_id]
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        self.setup_states[user_id] = {"step": "api_id"}
        await utils.answer(message, self.strings["vcsetup_start"])
    
    async def watcher(self, message):
        """Watcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ vcsetup steps"""
        if not message.sender_id or message.sender_id not in self.setup_states:
            return
        
        user_id = message.sender_id
        state = self.setup_states[user_id]
        
        try:
            if state["step"] == "api_id":
                # –ü–æ–ª—É—á–∞–µ–º API ID
                try:
                    api_id = int(message.text.strip())
                    state["api_id"] = api_id
                    state["step"] = "api_hash"
                    await utils.answer(message, self.strings["vcsetup_api_hash"])
                except ValueError:
                    await utils.answer(message, "‚ùå <b>Invalid API ID</b>\\nSend numbers only")
                    return
            
            elif state["step"] == "api_hash":
                # –ü–æ–ª—É—á–∞–µ–º API Hash
                api_hash = message.text.strip()
                state["api_hash"] = api_hash
                state["step"] = "phone"
                await utils.answer(message, self.strings["vcsetup_phone"])
            
            elif state["step"] == "phone":
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                phone = message.text.strip()
                state["phone"] = phone
                
                try:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Pyrogram –∫–ª–∏–µ–Ω—Ç
                    temp_client = PyrogramClient(
                        f"temp_session_{user_id}",
                        api_id=state["api_id"],
                        api_hash=state["api_hash"],
                        no_updates=True
                    )
                    
                    await temp_client.connect()
                    sent_code = await temp_client.send_code(phone)
                    
                    state["phone_code_hash"] = sent_code.phone_code_hash
                    state["step"] = "code"
                    state["temp_client"] = temp_client
                    self.temp_clients[user_id] = temp_client
                    
                    await utils.answer(message, self.strings["vcsetup_code"])
                    
                except Exception as e:
                    await utils.answer(message, self.strings["vcsetup_failed"].format(str(e)))
                    del self.setup_states[user_id]
                    return
            
            elif state["step"] == "code":
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                code = message.text.strip()
                
                try:
                    temp_client = state["temp_client"]
                    
                    try:
                        signed_in = await temp_client.sign_in(
                            state["phone"],
                            state["phone_code_hash"],
                            code
                        )
                        
                        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º session string
                        session_string = await temp_client.export_session_string()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        session_data = {
                            "api_id": state["api_id"],
                            "api_hash": state["api_hash"],
                            "session_string": session_string,
                            "phone": state["phone"],
                            "created_at": time.time()
                        }
                        
                        self.db.set("VoiceChatNative", "session", session_data)
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º backend
                        await self._initialize_backend()
                        
                        await utils.answer(message, self.strings["vcsetup_complete"])
                        
                        # –û—á–∏—Å—Ç–∫–∞
                        await temp_client.stop()
                        del self.temp_clients[user_id]
                        del self.setup_states[user_id]
                        
                    except SessionPasswordNeeded:
                        # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
                        state["step"] = "2fa"
                        await utils.answer(message, self.strings["vcsetup_2fa"])
                        
                except Exception as e:
                    await utils.answer(message, self.strings["vcsetup_failed"].format(str(e)))
                    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    temp_client = self.temp_clients.get(user_id)
                    if temp_client:
                        try:
                            await temp_client.stop()
                        except:
                            pass
                        del self.temp_clients[user_id]
                    del self.setup_states[user_id]
                    return
            
            elif state["step"] == "2fa":
                # –ü–æ–ª—É—á–∞–µ–º 2FA –ø–∞—Ä–æ–ª—å
                password = message.text.strip()
                
                try:
                    temp_client = state["temp_client"]
                    
                    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA
                    await temp_client.check_password(password)
                    
                    # –ü–æ–ª—É—á–∞–µ–º session string
                    session_string = await temp_client.export_session_string()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    session_data = {
                        "api_id": state["api_id"],
                        "api_hash": state["api_hash"],
                        "session_string": session_string,
                        "phone": state["phone"],
                        "created_at": time.time()
                    }
                    
                    self.db.set("VoiceChatNative", "session", session_data)
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º backend
                    await self._initialize_backend()
                    
                    await utils.answer(message, self.strings["vcsetup_complete"])
                    
                    # –û—á–∏—Å—Ç–∫–∞
                    await temp_client.stop()
                    del self.temp_clients[user_id]
                    del self.setup_states[user_id]
                    
                except Exception as e:
                    await utils.answer(message, self.strings["vcsetup_failed"].format(str(e)))
                    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    temp_client = self.temp_clients.get(user_id)
                    if temp_client:
                        try:
                            await temp_client.stop()
                        except:
                            pass
                        del self.temp_clients[user_id]
                    del self.setup_states[user_id]
                    return
                    
        except Exception as e:
            logging.error(f"‚ùå Watcher error: {e}")
            await utils.answer(message, self.strings["vcsetup_failed"].format(str(e)))
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            if user_id in self.temp_clients:
                try:
                    await self.temp_clients[user_id].stop()
                except:
                    pass
                del self.temp_clients[user_id]
            if user_id in self.setup_states:
                del self.setup_states[user_id]
    
    @loader.command()
    async def addm(self, message):
        """Add music to voice chat queue"""
        if not await self._check_streaming_available(message):
            return
        
        if not await self._check_backend(message):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ–¥–∏–∞
        source = await self._get_media_source(message)
        if not source:
            await utils.answer(message, self.strings["no_media"])
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        queue_item = await self._resolve_source(source, {"user_id": message.sender_id, "is_video": False})
        if not queue_item:
            await utils.answer(message, self.strings["download_failed"])
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        chat_id = utils.get_chat_id(message)
        position = self.queue_manager.add_item(chat_id, queue_item)
        await self.queue_manager.save_queues()
        
        await utils.answer(
            message,
            self.strings["added_to_queue"].format(
                queue_item.title,
                queue_item.duration,
                position
            )
        )
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.config["auto_play"] and not self.backend.is_playing(chat_id):
            await self._play_next(chat_id)
    
    @loader.command()
    async def addv(self, message):
        """Add video to voice chat queue"""
        if not await self._check_streaming_available(message):
            return
        
        if not await self._check_backend(message):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ–¥–∏–∞
        source = await self._get_media_source(message)
        if not source:
            await utils.answer(message, self.strings["no_media"])
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        queue_item = await self._resolve_source(source, {"user_id": message.sender_id, "is_video": True})
        if not queue_item:
            await utils.answer(message, self.strings["download_failed"])
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥–µ–æ
        queue_item.is_video = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        chat_id = utils.get_chat_id(message)
        position = self.queue_manager.add_item(chat_id, queue_item)
        await self.queue_manager.save_queues()
        
        await utils.answer(
            message,
            self.strings["added_to_queue"].format(
                queue_item.title,
                queue_item.duration,
                position
            )
        )
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.config["auto_play"] and not self.backend.is_playing(chat_id):
            await self._play_next(chat_id)
    
    @loader.command()
    async def pause(self, message):
        """Pause current playback"""
        if not await self._check_backend(message):
            return
        
        chat_id = utils.get_chat_id(message)
        
        if not self.backend.is_playing(chat_id):
            await utils.answer(message, self.strings["not_in_voice_chat"])
            return
        
        success = await self.backend.pause_stream(chat_id)
        if success:
            await utils.answer(message, self.strings["paused"])
        else:
            await utils.answer(message, "‚ùå <b>Failed to pause</b>")
    
    @loader.command()
    async def resume(self, message):
        """Resume playback"""
        if not await self._check_backend(message):
            return
        
        chat_id = utils.get_chat_id(message)
        
        if not self.backend.is_paused(chat_id):
            await utils.answer(message, "‚ùå <b>Not paused</b>")
            return
        
        success = await self.backend.resume_stream(chat_id)
        if success:
            await utils.answer(message, self.strings["resumed"])
        else:
            await utils.answer(message, "‚ùå <b>Failed to resume</b>")
    
    @loader.command()
    async def stop(self, message):
        """Stop playback and leave voice chat"""
        if not await self._check_backend(message):
            return
        
        chat_id = utils.get_chat_id(message)
        
        if not self.backend.is_in_call(chat_id):
            await utils.answer(message, self.strings["not_in_voice_chat"])
            return
        
        success = await self.backend.stop_stream(chat_id)
        if success:
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            self.queue_manager.clear_queue(chat_id)
            await self.queue_manager.save_queues()
            await utils.answer(message, self.strings["stopped"])
        else:
            await utils.answer(message, "‚ùå <b>Failed to stop</b>")
    
    @loader.command()
    async def queue(self, message):
        """Show current queue"""
        chat_id = utils.get_chat_id(message)
        queue = self.queue_manager.get_queue(chat_id)
        
        if not queue:
            await utils.answer(message, self.strings["queue_empty"])
            return
        
        current_index = self.queue_manager._current_playing.get(chat_id, 0)
        
        queue_text = ""
        for i, item in enumerate(queue):
            marker = "‚ñ∂Ô∏è " if i == current_index else ""
            queue_text += self.strings["queue_item"].format(
                i + 1,
                item.title,
                item.duration,
                marker
            )
        
        repeat_status = " üîÅ" if self.queue_manager.is_repeat_enabled(chat_id) else ""
        
        await utils.answer(
            message,
            self.strings["queue_status"].format(len(queue), queue_text) + repeat_status
        )
    
    @loader.command()
    async def repeat(self, message):
        """Toggle repeat mode"""
        chat_id = utils.get_chat_id(message)
        current_repeat = self.queue_manager.is_repeat_enabled(chat_id)
        
        self.queue_manager.set_repeat(chat_id, not current_repeat)
        await self.queue_manager.save_queues()
        
        if not current_repeat:
            await utils.answer(message, self.strings["repeat_enabled"])
        else:
            await utils.answer(message, self.strings["repeat_disabled"])
    
    @loader.command()
    async def clearqueue(self, message):
        """Clear current queue"""
        chat_id = utils.get_chat_id(message)
        self.queue_manager.clear_queue(chat_id)
        await self.queue_manager.save_queues()
        
        await utils.answer(message, self.strings["queue_cleared"])
    
    # Helper methods
    
    async def _check_streaming_available(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if not STREAMING_AVAILABLE:
            await utils.answer(message, self.strings["streaming_unavailable"].format(STREAMING_ERROR))
            return False
        return True
    
    async def _check_backend(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend"""
        if not self.backend or not self.backend.is_initialized:
            await utils.answer(message, self.strings["not_configured"])
            return False
        return True
    
    async def _get_media_source(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = utils.get_args_raw(message)
        if args:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube URL
            if "youtube.com" in args or "youtu.be" in args:
                return {"type": "youtube", "url": args}
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π URL
            elif args.startswith(("http://", "https://")):
                return {"type": "url", "url": args}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply –º–µ–¥–∏–∞
        reply = await message.get_reply_message()
        if reply and reply.media:
            return {"type": "telegram", "message": reply}
        
        return None
    
    async def _resolve_source(self, source, metadata):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–µ–¥–∏–∞"""
        try:
            if source["type"] == "youtube":
                return await self.youtube_resolver.resolve(source["url"], metadata)
            elif source["type"] == "url":
                return await self.url_resolver.resolve(source["url"], metadata)
            elif source["type"] == "telegram":
                return await self.telegram_resolver.resolve(source["message"], metadata)
        except Exception as e:
            logging.error(f"‚ùå Source resolve error: {e}")
            return None
    
    async def _play_next(self, chat_id: int):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            current_item = self.queue_manager.get_current(chat_id)
            if not current_item:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            if not os.path.exists(current_item.file_path):
                logging.error(f"‚ùå File not found: {current_item.file_path}")
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                next_item = self.queue_manager.next_item(chat_id)
                if next_item:
                    await self._play_next(chat_id)
                return
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            success = await self.backend.play_media(
                chat_id, 
                current_item.file_path, 
                current_item.is_video
            )
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                chat_title = f"Chat {chat_id}"  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ self.client
                logging.info(f"üéµ Now playing: {current_item.title} in {chat_title}")
            else:
                logging.error(f"‚ùå Failed to play: {current_item.title}")
                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                next_item = self.queue_manager.next_item(chat_id)
                if next_item:
                    await self._play_next(chat_id)
                    
        except Exception as e:
            logging.error(f"‚ùå Play next error: {e}")